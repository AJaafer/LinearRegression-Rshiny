deployApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='kunaljagtap', token='A6E317CF49CE77120109049C52D2A930', secret='a/Fn//o8FFVwcmBcuPacVRZ5BCymuxts1e5flEFx')
deployApp()
setwd("~/R/LinearRegression")
deployApp()
install.packages("dplyr")
runApp()
deployApp()
install.packages("shinythemes")
deployApp()
shiny::runApp(list(
ui = bootstrapPage(
tableOutput("table")
),
server = function(input, output) {
output$table <- renderTable({
urls <- c("http://www.google.fr", "http://www.google.fr")
refs <- paste0("<a href='",  urls, "' target='_blank'>GOOGLE</a>")
data.frame(refs)
}, sanitize.text.function = function(x) x)
}
))
@import url("//fonts.googleapis.com/css?family=Lobster|Cabin:400,700");
shiny::runApp(list(
ui = bootstrapPage(
tableOutput("table")
),
server = function(input, output) {
output$table <- renderTable({
urls <- c("http://www.google.fr", "http://www.google.fr")
refs <- paste0("<a href='",  urls, "' target='_blank'>GOOGLE</a>")
data.frame(refs)
}, sanitize.text.function = function(x) x)
}
))
install.packages("bootstrapPage")
runApp()
setwd("~/R/LinearRegression")
runApp()
install.packages("runApp")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
?rnorm()
runApp()
file<- file[1:input$obs,]
x<- file[,1]
library(shiny)
shinyServer(function(input, output) {
inputData<-reactive({
inFile <- input$data
if (is.null(inFile))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
output$table <- renderTable({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
?rnorm()
}
else
{
if(is.null(input$data))  {
return(NULL)
}
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
}
})
output$plot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote =  input$quote)
file<- file[1:input$obs,]
x<- file[,1]
x
y<- file[,2]
}
a<- input$intercept
b<-input$slope
#
#    yhat <- input$intercept + x * input$slope
regression <- lm(x~y)
intercept1<- coef(regression)["(Intercept)"]
slope<- coef(regression)["y"]
#
plot(x, y, cex = 1, font = 3)
points(x, y, pch = 16, cex = 0.8, col = "red",,xlab = "Explanatory Variable",ylab = "Outcome Variable")
title("Linear Regression")
#abline(a = coef(ckd_model)[1], b = coef(intercept1)[2], lty = 2, lwd = 2, col = "red")
abline(intercept = intercept1, slope = slope, colour = "red", size = 2)
})
output$LinearPlot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
par(mfrow=c(2,2))
plot(lm(x~y),col.axis = "blue")
points(x, y, pch = 16, cex = 0.8, col = "red")
})
output$summary <-renderPrint({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return()
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
}
summary(file)
})
output$Linearsummary <-renderPrint({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return()
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
summary(lm(x~y))
})
})
x<- file[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file<- file[1:input$obs,]
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
inFile <- input$data
inFile <- input$data
library(shiny)
inputData<-reactive({
inFile <- input$data
if (is.null(inFile))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
inFile <- input$data
inFile <- input$data
if (is.null(inFile))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
inputData<-reactive({
inFile <- input$data
if (is.null(inFile))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
output$table <- renderTable({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
?rnorm()
}
else
{
if(is.null(input$data))  {
return(NULL)
}
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
}
})
output$LinearPlot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
par(mfrow=c(2,2))
plot(lm(x~y),col.axis = "blue")
points(x, y, pch = 16, cex = 0.8, col = "red")
})
shinyServer(function(input, output) {
inputData<-reactive({
inFile <- input$data
if (is.null(inFile))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
output$table <- renderTable({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
?rnorm()
}
else
{
if(is.null(input$data))  {
return(NULL)
}
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
}
})
output$plot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
a<- input$intercept
b<-input$slope
#
#    yhat <- input$intercept + x * input$slope
regression <- lm(x~y)
intercept1<- coef(regression)["(Intercept)"]
slope<- coef(regression)["y"]
#
plot(x, y, cex = 1, font = 3)
points(x, y, pch = 16, cex = 0.8, col = "red",,xlab = "Explanatory Variable",ylab = "Outcome Variable")
title("Linear Regression")
#abline(a = coef(ckd_model)[1], b = coef(intercept1)[2], lty = 2, lwd = 2, col = "red")
abline(intercept = intercept1, slope = slope, colour = "red", size = 2)
})
output$LinearPlot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
par(mfrow=c(2,2))
plot(lm(x~y),col.axis = "blue")
points(x, y, pch = 16, cex = 0.8, col = "red")
})
})
output$plot <- renderPlot({
inFile <- input$data
if(input$default == T)
{
x <- rnorm(input$obs, 0, 2)
y <- 2 + x + rnorm(input$obs, 0, 1)
file <- cbind(x,y)
}
else {
if(is.null(input$data))
return(NULL)
file <- read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
file<- file[1:input$obs,]
x<- file[,1]
y<- file[,2]
}
a<- input$intercept
b<-input$slope
#
#    yhat <- input$intercept + x * input$slope
regression <- lm(x~y)
intercept1<- coef(regression)["(Intercept)"]
slope<- coef(regression)["y"]
#
plot(x, y, cex = 1, font = 3)
points(x, y, pch = 16, cex = 0.8, col = "red",,xlab = "Explanatory Variable",ylab = "Outcome Variable")
title("Linear Regression")
#abline(a = coef(ckd_model)[1], b = coef(intercept1)[2], lty = 2, lwd = 2, col = "red")
abline(intercept = intercept1, slope = slope, colour = "red", size = 2)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ckdregression', token='7F375B19DD55C49DCCB47A6F4B5FD684', secret='RsefBwKNh2DjzusdaPPjyAX/43aFXTDsN+qck/9Y')
rsconnect::setAccountInfo(name='ckdregression', token='7F375B19DD55C49DCCB47A6F4B5FD684', secret='RsefBwKNh2DjzusdaPPjyAX/43aFXTDsN+qck/9Y')
runApp()
install.packages("devtools")
runApp()
shiny::runApp()
deployApp()
library(rsconnect)
library(rsconnect)
deployApp()
shiny::runApp()
